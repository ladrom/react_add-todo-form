{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["TodoInfo","todo","users","title","completed","userId","className","classNames","href","email","name","TodoList","todos","map","id","username","App","useState","setTitle","user","setUser","todosFromServer","todosOnPage","setTodosOnPage","titleError","setTitleError","userError","setUserError","action","method","onSubmit","event","preventDefault","trim","newTitle","replace","newTodo","reduce","prev","current","htmlFor","type","placeholder","value","onChange","target","disabled","usersFromServer","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.880ca8a7.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\n\ntype Props = {\n  todo: Todo,\n  users: User[],\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo, users }) => {\n  const {\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  return (\n    <article\n      data-id={userId}\n      className={\n        classNames(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <a className=\"UserInfo\" href={users[userId - 1].email}>\n        {users[userId - 1].name}\n      </a>\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\n\ntype Props = {\n  todos: Todo[],\n  users: User[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, users }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          users={users}\n          key={todo.id}\n          data-id={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState('0');\n  const [todosOnPage, setTodosOnPage] = useState([...todosFromServer]);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUser(event.target.value);\n    setUserError(false);\n  };\n\n  const clearForm = () => {\n    setTitle('');\n    setUser('0');\n  };\n\n  const handleAddButton = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim() || !+user) {\n      if (!title.trim()) {\n        setTitleError(true);\n      }\n\n      if (!+user) {\n        setUserError(true);\n      }\n\n      return;\n    }\n\n    const newTitle = title.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, '');\n\n    const maxId = todosOnPage.reduce((prev, current) => {\n      return prev.id > current.id ? prev : current;\n    }).id;\n\n    const newTodo: Todo = {\n      id: maxId + 1,\n      title: newTitle,\n      userId: +user,\n      completed: false,\n    };\n\n    setTodosOnPage([...todosOnPage, newTodo]);\n    clearForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleAddButton}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n            Title:\n            <span>&nbsp;</span>\n          </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitle}\n          />\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">\n            User:\n            <span>&nbsp;</span>\n          </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            name=\"user\"\n            value={user}\n            onChange={handleUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(userFromServer => {\n              const { id, name } = userFromServer;\n\n              return (\n                <option value={id} key={id}>{name}</option>\n              );\n            })}\n          </select>\n\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosOnPage} users={usersFromServer} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}