{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["TodoInfo","todo","user","title","completed","userId","name","email","className","classNames","href","TodoList","todos","users","map","targetUser","id","username","App","useState","setTitle","setUser","todosFromServer","todosOnPage","setTodosOnPage","titleError","setTitleError","userError","setUserError","action","method","onSubmit","event","preventDefault","trim","newTitle","replace","newTodo","reduce","prev","current","htmlFor","type","placeholder","value","onChange","target","disabled","usersFromServer","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"qOASaA,EAA4B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAE9CC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,OAGMC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,MAEd,OACE,0BACE,UAASF,EACTG,UACEC,IACE,WACA,CAAE,sBAAuBL,IAL/B,UASE,oBAAII,UAAU,kBAAd,SACGL,IAGH,mBAAGK,UAAU,WAAWE,KAAI,kBAAaH,GAAzC,SACGD,QCxBIK,EAA4B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACjD,OACE,yBAASL,UAAU,WAAnB,SACGI,EAAME,KAAI,SAAAb,GACT,IAAMc,EAAaF,EAAMZ,EAAKI,OAAS,GAEvC,OACE,cAAC,EAAD,CACEJ,KAAMA,EACNC,KAAMa,EAEN,UAASd,EAAKe,IADTf,EAAKe,UCnBP,GACb,CACEA,GAAI,EACJV,KAAM,gBACNW,SAAU,OACVV,MAAO,qBAET,CACES,GAAI,EACJV,KAAM,eACNW,SAAU,YACVV,MAAO,qBAET,CACES,GAAI,EACJV,KAAM,mBACNW,SAAU,WACVV,MAAO,sBAET,CACES,GAAI,EACJV,KAAM,mBACNW,SAAU,WACVV,MAAO,6BAET,CACES,GAAI,EACJV,KAAM,mBACNW,SAAU,SACVV,MAAO,4BAET,CACES,GAAI,EACJV,KAAM,uBACNW,SAAU,mBACVV,MAAO,2BAET,CACES,GAAI,EACJV,KAAM,kBACNW,SAAU,eACVV,MAAO,0BAET,CACES,GAAI,EACJV,KAAM,2BACNW,SAAU,gBACVV,MAAO,wBAET,CACES,GAAI,EACJV,KAAM,kBACNW,SAAU,WACVV,MAAO,2BAET,CACES,GAAI,GACJV,KAAM,qBACNW,SAAU,iBACVV,MAAO,2BC3DI,GACb,CACES,GAAI,EACJb,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEW,GAAI,GACJb,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEW,GAAI,EACJb,MAAO,qCACPC,WAAW,EACXC,OAAQ,ICTCa,EAAM,WACjB,MAA0BC,mBAAS,IAAnC,mBAAOhB,EAAP,KAAciB,EAAd,KACA,EAAwBD,mBAAS,GAAjC,mBAAOjB,EAAP,KAAamB,EAAb,KACA,EAAsCF,mBAAS,YAAIG,IAAnD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KAiDA,OACE,sBAAKpB,UAAU,MAAf,UACE,+CAEA,uBACEqB,OAAO,aACPC,OAAO,OACPC,SAvCkB,SAACC,GAGvB,GAFAA,EAAMC,kBAED9B,EAAM+B,SAAWhC,EASpB,OARKC,EAAM+B,QACTR,GAAc,QAGXxB,GACH0B,GAAa,IAMjB,IAAMO,EAAWhC,EAAMiC,QAAQ,4CAAyB,IAMlDC,EAAgB,CACpBrB,GALYO,EAAYe,QAAO,SAACC,EAAMC,GACtC,OAAOD,EAAKvB,GAAKwB,EAAQxB,GAAKuB,EAAOC,KACpCxB,GAGW,EACZb,MAAOgC,EACP9B,OAAQH,EACRE,WAAW,GAGboB,EAAe,GAAD,mBAAKD,GAAL,CAAkBc,KAhChCjB,EAAS,IACTC,EAAQ,IAuCN,UAKE,sBAAKb,UAAU,QAAf,UACE,wBAAOiC,QAAQ,aAAf,mBAEE,2CAGF,uBACEC,KAAK,OACL,UAAQ,aACR1B,GAAG,aACH2B,YAAY,gBACZC,MAAOzC,EACP0C,SApEU,SAACb,GACnBZ,EAASY,EAAMc,OAAOF,OACtBlB,GAAc,MAqEPD,GACC,sBAAMjB,UAAU,QAAhB,qCAIJ,sBAAKA,UAAU,QAAf,UACE,wBAAOiC,QAAQ,aAAf,kBAEE,2CAGF,yBACE,UAAQ,aACRzB,GAAG,aACHV,KAAK,OACLsC,MAAO1C,EACP2C,SAlFS,SAACb,GAClBX,GAASW,EAAMc,OAAOF,OACtBhB,GAAa,IA2EP,UAOE,wBAAQgB,MAAM,IAAIG,UAAQ,EAA1B,2BAECC,EAAgBlC,KAAI,SAAAmC,GACnB,IAAQjC,EAAaiC,EAAbjC,GAAIV,EAAS2C,EAAT3C,KAEZ,OACE,wBAAQsC,MAAO5B,EAAf,SAA6BV,GAALU,SAK7BW,GACC,sBAAMnB,UAAU,QAAhB,qCAIJ,wBAAQkC,KAAK,SAAS,UAAQ,eAA9B,oBAIF,cAAC,EAAD,CAAU9B,MAAOW,EAAaV,MAAOmC,QCzH3CE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.cc7eafaf.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\n\ntype Props = {\n  todo: Todo,\n  user: User,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo, user }) => {\n  const {\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const { name, email } = user;\n\n  return (\n    <article\n      data-id={userId}\n      className={\n        classNames(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <a className=\"UserInfo\" href={`mailto: ${email}`}>\n        {name}\n      </a>\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\n\ntype Props = {\n  todos: Todo[],\n  users: User[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, users }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        const targetUser = users[todo.userId - 1];\n\n        return (\n          <TodoInfo\n            todo={todo}\n            user={targetUser}\n            key={todo.id}\n            data-id={todo.id}\n          />\n        );\n      })}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState(0);\n  const [todosOnPage, setTodosOnPage] = useState([...todosFromServer]);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUser(+event.target.value);\n    setUserError(false);\n  };\n\n  const clearForm = () => {\n    setTitle('');\n    setUser(0);\n  };\n\n  const handleAddButton = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim() || !user) {\n      if (!title.trim()) {\n        setTitleError(true);\n      }\n\n      if (!user) {\n        setUserError(true);\n      }\n\n      return;\n    }\n\n    const newTitle = title.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, '');\n\n    const maxId = todosOnPage.reduce((prev, current) => {\n      return prev.id > current.id ? prev : current;\n    }).id;\n\n    const newTodo: Todo = {\n      id: maxId + 1,\n      title: newTitle,\n      userId: user,\n      completed: false,\n    };\n\n    setTodosOnPage([...todosOnPage, newTodo]);\n    clearForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleAddButton}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n            Title:\n            <span>&nbsp;</span>\n          </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitle}\n          />\n\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">\n            User:\n            <span>&nbsp;</span>\n          </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            name=\"user\"\n            value={user}\n            onChange={handleUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(userFromServer => {\n              const { id, name } = userFromServer;\n\n              return (\n                <option value={id} key={id}>{name}</option>\n              );\n            })}\n          </select>\n\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosOnPage} users={usersFromServer} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}